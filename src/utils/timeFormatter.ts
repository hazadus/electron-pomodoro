/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Pomodoro Timer
 */

export interface TimeComponents {
  hours: number;
  minutes: number;
  seconds: number;
}

export class TimeFormatter {
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç MM:SS –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ
   */
  static formatTimerDisplay(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;

    return `${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç "X—á X–º" –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  static formatDurationReadable(totalMinutes: number): string {
    if (totalMinutes === 0) {
      return "0–º";
    }

    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;

    if (hours === 0) {
      return `${minutes}–º`;
    }

    if (minutes === 0) {
      return `${hours}—á`;
    }

    return `${hours}—á ${minutes}–º`;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
   */
  static minutesToSeconds(minutes: number): number {
    return minutes * 60;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö)
   */
  static secondsToMinutes(seconds: number): number {
    return Math.ceil(seconds / 60);
  }

  /**
   * –†–∞–∑–±–∏—Ä–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
   */
  static parseTimeComponents(totalSeconds: number): TimeComponents {
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;

    return { hours, minutes, seconds };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç—Ä–µ–µ —Å —ç–º–æ–¥–∑–∏
   */
  static formatTrayTitle(
    seconds: number,
    timerType: "work" | "shortBreak" | "longBreak"
  ): string {
    const timeStr = this.formatTimerDisplay(seconds);

    const emojis = {
      work: "üçÖ",
      shortBreak: "‚òï",
      longBreak: "üõãÔ∏è",
    };

    const emoji =
      timerType === "work"
        ? emojis.work
        : timerType === "shortBreak"
          ? emojis.shortBreak
          : emojis.longBreak;
    return `${emoji} ${timeStr}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤ "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∑–æ–Ω–µ" (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥)
   */
  static isCriticalTime(seconds: number): boolean {
    return seconds <= 60;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  static formatRemainingTimeNotification(seconds: number): string {
    if (seconds < 60) {
      return `${seconds} —Å–µ–∫`;
    }

    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;

    if (remainingSeconds === 0) {
      return `${minutes} –º–∏–Ω`;
    }

    return `${minutes} –º–∏–Ω ${remainingSeconds} —Å–µ–∫`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
   */
  static getTimerTypeLabel(
    timerType: "work" | "shortBreak" | "longBreak"
  ): string {
    const labels = {
      work: "—Ä–∞–±–æ—Ç–∞",
      shortBreak: "–∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤",
      longBreak: "–¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤",
    };

    const label =
      timerType === "work"
        ? labels.work
        : timerType === "shortBreak"
          ? labels.shortBreak
          : labels.longBreak;
    return label;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
   */
  static formatSettingsDuration(minutes: number): string {
    return `${minutes} –º–∏–Ω`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  static isValidDuration(minutes: number): boolean {
    return minutes > 0 && minutes <= 1440 && Number.isInteger(minutes); // –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  static formatDateForLogs(): string {
    return new Date().toISOString();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  static formatLastResetDate(dateString: string): string {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString("ru-RU", {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch {
      return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 –¥–Ω—è –Ω–∞–∑–∞–¥")
   */
  static getRelativeTime(dateString: string): string {
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      }
      const now = new Date();
      const diffMs = now.getTime() - date.getTime();
      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

      if (diffDays === 0) {
        return "–°–µ–≥–æ–¥–Ω—è";
      } else if (diffDays === 1) {
        return "–í—á–µ—Ä–∞";
      } else if (diffDays < 7) {
        return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
      } else if (diffDays < 30) {
        const weeks = Math.floor(diffDays / 7);
        return weeks === 1 ? "1 –Ω–µ–¥. –Ω–∞–∑–∞–¥" : `${weeks} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
      } else {
        const months = Math.floor(diffDays / 30);
        return months === 1 ? "1 –º–µ—Å. –Ω–∞–∑–∞–¥" : `${months} –º–µ—Å. –Ω–∞–∑–∞–¥`;
      }
    } catch {
      return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  }
}
