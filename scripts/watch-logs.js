#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ Pomodoro Timer –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

const fs = require("fs");
const path = require("path");
const os = require("os");

// ANSI —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const colors = {
  red: "\x1b[31m",
  orange: "\x1b[33m",
  yellow: "\x1b[93m",
  green: "\x1b[32m",
  blue: "\x1b[34m",
  purple: "\x1b[35m",
  brown: "\x1b[90m",
  gray: "\x1b[90m",
  reset: "\x1b[0m",
  bold: "\x1b[1m",
  dim: "\x1b[2m",
};

// –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
const logColors = {
  "main.log": colors.red,
  "timer.log": colors.orange,
  "tray.log": colors.yellow,
  "stats.log": colors.green,
  "settings.log": colors.blue,
  "notification.log": colors.purple,
  "sound.log": colors.brown,
  "performance.log": colors.gray,
  "errors.log": colors.red,
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
function getLogsDirectory() {
  const platform = process.platform;
  let logsDir;

  if (platform === "darwin") {
    logsDir = path.join(
      os.homedir(),
      "Library",
      "Application Support",
      "Pomodoro Timer",
      "logs"
    );
  } else if (platform === "win32") {
    logsDir = path.join(
      os.homedir(),
      "AppData",
      "Roaming",
      "Pomodoro Timer",
      "logs"
    );
  } else {
    logsDir = path.join(os.homedir(), ".config", "Pomodoro Timer", "logs");
  }

  return logsDir;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
function formatTimestamp() {
  const now = new Date();
  return now.toLocaleTimeString("ru-RU", {
    hour12: false,
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    fractionalSecondDigits: 3,
  });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∞
function formatLogOutput(filename, line) {
  const color = logColors[filename] || colors.gray;
  const timestamp = formatTimestamp();
  const filenamePart = `[${filename}]`.padEnd(18);

  return `${colors.dim}${timestamp}${colors.reset} ${color}${filenamePart}${colors.reset} ${line}`;
}

// –ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
class LogWatcher {
  constructor(filepath) {
    this.filepath = filepath;
    this.filename = path.basename(filepath);
    this.lastSize = 0;
    this.watcher = null;
    this.init();
  }

  init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ä–∞–∑–º–µ—Ä
    if (fs.existsSync(this.filepath)) {
      const stats = fs.statSync(this.filepath);
      this.lastSize = stats.size;
    }

    // –°–æ–∑–¥–∞–µ–º watcher –¥–ª—è —Ñ–∞–π–ª–∞
    this.setupWatcher();
  }

  setupWatcher() {
    try {
      this.watcher = fs.watchFile(
        this.filepath,
        { interval: 100 },
        (curr, prev) => {
          if (curr.mtime > prev.mtime && curr.size > this.lastSize) {
            this.readNewLines(curr.size);
          } else if (curr.size < this.lastSize) {
            // –§–∞–π–ª –±—ã–ª —É—Å–µ—á–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤)
            this.lastSize = 0;
            this.readNewLines(curr.size);
          }
        }
      );
    } catch (error) {
      console.error(
        `${colors.red}–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è watcher –¥–ª—è ${this.filename}: ${error.message}${colors.reset}`
      );
    }
  }

  readNewLines(newSize) {
    if (!fs.existsSync(this.filepath)) {
      return;
    }

    try {
      const fd = fs.openSync(this.filepath, "r");
      const bufferSize = newSize - this.lastSize;

      if (bufferSize > 0) {
        const buffer = Buffer.alloc(bufferSize);
        fs.readSync(fd, buffer, 0, bufferSize, this.lastSize);
        fs.closeSync(fd);

        const content = buffer.toString("utf8");
        const lines = content.split("\n").filter((line) => line.trim());

        lines.forEach((line) => {
          console.log(formatLogOutput(this.filename, line));
        });
      }

      this.lastSize = newSize;
    } catch (error) {
      console.error(
        `${colors.red}–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${this.filename}: ${error.message}${colors.reset}`
      );
    }
  }

  destroy() {
    if (this.watcher) {
      fs.unwatchFile(this.filepath);
      this.watcher = null;
    }
  }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
class LogsMonitor {
  constructor() {
    this.logsDir = getLogsDirectory();
    this.watchers = new Map();
    this.isRunning = false;
  }

  start() {
    console.log(
      `${colors.bold}üçÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Pomodoro Timer${colors.reset}`
    );
    console.log(
      `${colors.dim}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: ${this.logsDir}${colors.reset}`
    );
    console.log(`${colors.dim}–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${colors.reset}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
    if (!fs.existsSync(this.logsDir)) {
      console.log(
        `${colors.yellow}‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é...${colors.reset}`
      );
      try {
        fs.mkdirSync(this.logsDir, { recursive: true });
      } catch (error) {
        console.error(
          `${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤: ${error.message}${colors.reset}`
        );
        process.exit(1);
      }
    }

    this.isRunning = true;
    this.scanLogFiles();
    this.setupDirectoryWatcher();
  }

  scanLogFiles() {
    try {
      const files = fs.readdirSync(this.logsDir);
      const logFiles = files.filter((file) => file.endsWith(".log"));

      logFiles.forEach((filename) => {
        const filepath = path.join(this.logsDir, filename);
        if (!this.watchers.has(filename)) {
          console.log(
            `${colors.green}üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ª–æ–≥–∞: ${filename}${colors.reset}`
          );
          this.watchers.set(filename, new LogWatcher(filepath));
        }
      });

      if (logFiles.length === 0) {
        console.log(
          `${colors.yellow}‚è≥ –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–∂–∏–¥–∞—é –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è...${colors.reset}`
        );
      }
    } catch (error) {
      console.error(
        `${colors.red}‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: ${error.message}${colors.reset}`
      );
    }
  }

  setupDirectoryWatcher() {
    try {
      fs.watch(this.logsDir, (eventType, filename) => {
        if (filename && filename.endsWith(".log")) {
          const filepath = path.join(this.logsDir, filename);

          if (eventType === "rename") {
            if (fs.existsSync(filepath) && !this.watchers.has(filename)) {
              console.log(
                `${colors.green}üìÑ –ù–æ–≤—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞: ${filename}${colors.reset}`
              );
              this.watchers.set(filename, new LogWatcher(filepath));
            } else if (
              !fs.existsSync(filepath) &&
              this.watchers.has(filename)
            ) {
              console.log(
                `${colors.yellow}üóëÔ∏è  –§–∞–π–ª –ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω: ${filename}${colors.reset}`
              );
              this.watchers.get(filename).destroy();
              this.watchers.delete(filename);
            }
          }
        }
      });
    } catch (error) {
      console.error(
        `${colors.red}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è watcher –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}${colors.reset}`
      );
    }
  }

  stop() {
    if (!this.isRunning) return;

    console.log(
      `\n${colors.yellow}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...${colors.reset}`
    );

    this.watchers.forEach((watcher, filename) => {
      watcher.destroy();
    });
    this.watchers.clear();

    this.isRunning = false;
    console.log(`${colors.green}‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${colors.reset}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
function setupSignalHandlers(monitor) {
  const signals = ["SIGINT", "SIGTERM", "SIGQUIT"];

  signals.forEach((signal) => {
    process.on(signal, () => {
      monitor.stop();
      process.exit(0);
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  process.on("uncaughtException", (error) => {
    console.error(
      `${colors.red}‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}${colors.reset}`
    );
    monitor.stop();
    process.exit(1);
  });

  process.on("unhandledRejection", (reason) => {
    console.error(
      `${colors.red}‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise: ${reason}${colors.reset}`
    );
    monitor.stop();
    process.exit(1);
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
  console.log(`${colors.bold}üçÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Pomodoro Timer${colors.reset}

${colors.bold}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${colors.reset}
  node scripts/watch-logs.js    –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
  npm run logs                  –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞

${colors.bold}–û–ø–∏—Å–∞–Ω–∏–µ:${colors.reset}
  –°–∫—Ä–∏–ø—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Pomodoro Timer
  –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

${colors.bold}–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:${colors.reset}
  ${colors.red}main.log${colors.reset}         - –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  ${colors.orange}timer.log${colors.reset}        - –ª–æ–≥–∏ —Ç–∞–π–º–µ—Ä–æ–≤
  ${colors.yellow}tray.log${colors.reset}         - –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
  ${colors.green}stats.log${colors.reset}        - –ª–æ–≥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  ${colors.blue}settings.log${colors.reset}     - –ª–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  ${colors.purple}notification.log${colors.reset} - –ª–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  ${colors.brown}sound.log${colors.reset}        - –ª–æ–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–æ–≤

${colors.bold}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${colors.reset}
  Ctrl+C    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const args = process.argv.slice(2);

  if (args.includes("--help") || args.includes("-h")) {
    showHelp();
    return;
  }

  const monitor = new LogsMonitor();
  setupSignalHandlers(monitor);

  try {
    monitor.start();
  } catch (error) {
    console.error(
      `${colors.red}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}${colors.reset}`
    );
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = { LogsMonitor, LogWatcher };
